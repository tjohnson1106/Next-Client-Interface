{"version":3,"file":"static/webpack/static/development/pages/_app.js.82eede53fe7edb05b112.hot-update.js","sources":["webpack:///./lib/initApollo.ts"],"sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject\n} from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { isBrowser } from \"./isBrowser\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!isBrowser) {\n  (global as any).fetch = fetch;\n}\n\ninterface Options {\n  getToken: () => string;\n}\n\nfunction create(initialState: any, { getToken }: Options) {\n  const httpLink = createHttpLink({\n    uri: \"http://localhost:4000/graphql\",\n    credentials: \"include\"\n  });\n\n  // adds to header\n  // cookie name -> qid\n  const authLink = setContext((_options, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        cookie: token ? `qid=${token}` : \"\"\n      }\n    };\n  });\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState: any, options: Options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return create(initialState, options);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}